package com.eat.today.sns.query.config;

import com.eat.today.configure.security.JwtAuthorizationFilter;
import lombok.RequiredArgsConstructor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.annotation.Order;
import org.springframework.http.HttpMethod;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;

import java.util.List;

@Configuration
@RequiredArgsConstructor
public class PrChainConfig {

    private final AuthenticationManager authenticationManager;

    /** ‚úÖ Í≥µÏö© CORS ÏÑ§Ï†ï Bean */
    @Bean
    public CorsConfigurationSource corsConfigurationSource() {
        CorsConfiguration config = new CorsConfiguration();
        // ÌîÑÎ°†Ìä∏ Ï£ºÏÜå ÌóàÏö©
        config.addAllowedOriginPattern("http://localhost:5173");
        config.addAllowedOriginPattern("http://127.0.0.1:5173");
        // ÌóàÏö© Î©îÏÑúÎìú
        config.setAllowedMethods(List.of("GET", "POST", "PUT", "PATCH", "DELETE", "OPTIONS"));
        // Ìó§Îçî ÌóàÏö©
        config.setAllowedHeaders(List.of("*"));
        // JWT ÌÜ†ÌÅ∞ ÏùëÎãµ Ìó§Îçî ÎÖ∏Ï∂ú
        config.setExposedHeaders(List.of("Authorization", "Set-Cookie"));
        // Ïø†ÌÇ§ / Ïù∏Ï¶ùÏ†ïÎ≥¥ Ìè¨Ìï® ÌóàÏö©
        config.setAllowCredentials(true);
        config.setMaxAge(3600L);

        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", config);
        return source;
    }

    /** üì∏ ÏÇ¨ÏßÑ Î¶¨Î∑∞ Î≥∏Î¨∏/ÌååÏùº/Î∞òÏùë */
    @Bean
    @Order(3)
    public SecurityFilterChain photoReviewsCommandChain(HttpSecurity http) throws Exception {
        http
                .securityMatcher("/command/photo-reviews", "/command/photo-reviews/**")
                .cors(cors -> cors.configurationSource(corsConfigurationSource())) // ‚úÖ CORS ÌôúÏÑ±Ìôî
                .csrf(csrf -> csrf.disable())
                .sessionManagement(sm -> sm.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
                .authorizeHttpRequests(auth -> auth
                        // ‚úÖ OPTIONS ÏöîÏ≤≠ÏùÄ Ìï≠ÏÉÅ ÌóàÏö© (Preflight)
                        .requestMatchers(HttpMethod.OPTIONS, "/**").permitAll()

                        // ‚úÖ Ïù∏Ï¶ù ÌïÑÏöîÌïú ÏöîÏ≤≠Îì§
                        .requestMatchers(HttpMethod.POST, "/command/photo-reviews", "/command/photo-reviews/**").authenticated()
                        .requestMatchers(HttpMethod.PATCH, "/command/photo-reviews/**").authenticated()
                        .requestMatchers(HttpMethod.DELETE, "/command/photo-reviews/**").authenticated()

                        // ‚úÖ ÎÇòÎ®∏ÏßÄÎäî Í∏∞Î≥∏Ï†ÅÏúºÎ°ú ÌóàÏö©ÌïòÏßÄ ÏïäÏùå
                        .anyRequest().authenticated()
                )
                .exceptionHandling(eh -> eh
                        .authenticationEntryPoint((req, res, ex) -> {
                            res.setStatus(401);
                            res.setContentType("application/json;charset=UTF-8");
                            res.getWriter().write("{\"error\":\"unauthorized\"}");
                        })
                        .accessDeniedHandler((req, res, ex) -> {
                            res.setStatus(403);
                            res.setContentType("application/json;charset=UTF-8");
                            res.getWriter().write("{\"error\":\"forbidden\"}");
                        })
                )
                // ‚úÖ JWT ÌïÑÌÑ∞ Îì±Î°ù (Security Ïù∏Ï¶ù ÌïÑÌÑ∞Î≥¥Îã§ Î®ºÏ†Ä)
                .addFilterBefore(new JwtAuthorizationFilter(authenticationManager),
                        UsernamePasswordAuthenticationFilter.class);

        return http.build();
    }

    /** üí¨ ÏÇ¨ÏßÑÎ¶¨Î∑∞ ÎåìÍ∏Ä(PRC) */
    @Bean
    @Order(4)
    public SecurityFilterChain photoReviewCommentsCommandChain(HttpSecurity http) throws Exception {
        http
                .securityMatcher("/command/prc", "/command/prc/**")
                .cors(cors -> cors.configurationSource(corsConfigurationSource())) // ‚úÖ CORS ÌôúÏÑ±Ìôî
                .csrf(csrf -> csrf.disable())
                .sessionManagement(sm -> sm.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
                .authorizeHttpRequests(auth -> auth
                        // ‚úÖ OPTIONS ÏöîÏ≤≠ Î¨¥Ï°∞Í±¥ ÌóàÏö©
                        .requestMatchers(HttpMethod.OPTIONS, "/**").permitAll()

                        // ‚úÖ ÎåìÍ∏Ä Í¥ÄÎ†® ÏöîÏ≤≠ Ïù∏Ï¶ù
                        .requestMatchers(HttpMethod.POST, "/command/prc/reviews/**").authenticated()
                        .requestMatchers(HttpMethod.PATCH, "/command/prc/*").authenticated()
                        .requestMatchers(HttpMethod.DELETE, "/command/prc/*", "/command/prc/*/hard").authenticated()

                        .anyRequest().authenticated()
                )
                .exceptionHandling(eh -> eh
                        .authenticationEntryPoint((req, res, ex) -> {
                            res.setStatus(401);
                            res.setContentType("application/json;charset=UTF-8");
                            res.getWriter().write("{\"error\":\"unauthorized\"}");
                        })
                        .accessDeniedHandler((req, res, ex) -> {
                            res.setStatus(403);
                            res.setContentType("application/json;charset=UTF-8");
                            res.getWriter().write("{\"error\":\"forbidden\"}");
                        })
                )
                // ‚úÖ JWT ÌïÑÌÑ∞ Îì±Î°ù
                .addFilterBefore(new JwtAuthorizationFilter(authenticationManager),
                        UsernamePasswordAuthenticationFilter.class);

        return http.build();
    }
}